import telebot
from telebot import types

from django.core.paginator import Paginator

from .functions import get_or_create_user, add_state_user, change_customer_name, change_customer_phone,\
    validate_phone_number, change_customer_city, get_user, get_categories, get_about_shop,\
    get_product_by_category


def start_message(message, bot):
    user_info = {
        'telegram_id': message.chat.id,
        'username': message.from_user.username,
    }

    customer, new_customer = get_or_create_user(user_info)

    if new_customer:
        bot.send_message(message.chat.id,
                         '–í—ñ—Ç–∞—î–º–æ!\n\n'
                         '–í–∞—Å –≤—ñ—Ç–∞—î –º–∞–≥–∞–∑–∏–Ω –∫–∞–ª—å—è–Ω–Ω–∏—Ö –∞–∫—Å–µ—Å—É–∞—Ä—ñ–≤. '
                         '–í –Ω–∞—Å –≤–∏ –∑–º–æ–∂–µ—Ç–µ –∫—É–ø–∏—Ç–∏ –≤—Å–µ –¥–ª—è –∫–æ–º—Ñ–æ—Ä—Ç–Ω–æ–≥–æ –ø—Ä–æ–≤–µ–¥–µ–Ω–Ω—è —á–∞—Å—É.\n\n'
                         '–î–∞–≤–∞–π—Ç–µ –ø—Ä–æ–π–¥–µ–º–æ –∫–æ—Ä–æ—Ç–∫—É —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—é, –∞–ª–µ –í–∏ –º–æ–∂–µ—Ç–µ —ó—ó –ø—Ä–æ–ø—É—Å—Ç–∏—Ç–∏.',
                         reply_markup=registration_keyboard())
    else:
        bot.send_message(message.chat.id, '<b>–í–∏ –ø–µ—Ä–µ–π—à–ª–∏ –¥–æ –≥–æ–ª–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é.</b>\n\n'
                         'üõç –ö–∞—Ç–∞–ª–æ–≥ - –ø–æ—à—É–∫ —Ç–∞ –∫—É–ø—ñ–≤–ª—è —Ç–æ–≤–∞—Ä—É\n'
                         'üõí –ö–æ—Ä–∑–∏–Ω–∞ - –æ—Ñ–æ—Ä–º–ª–µ–Ω–Ω—è –∑–∞–º–æ–≤–ª–µ–Ω—å\n'
                         '‚ÑπÔ∏è –ü—Ä–æ –º–∞–≥–∞–∑–∏–Ω - –±—ñ–ª—å—à–µ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó –ø—Ä–æ –Ω–∞—Å\n'
                         'üë§ –ú–æ—ó –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è - –ø–µ—Ä–µ–≥–ª—è–¥ –ø–æ–ø–µ—Ä–µ–¥–Ω—ñ—Ö –∑–∞–º–æ–≤–ª–µ–Ω—å\n', reply_markup=main_keyboard())


def reg_customer_name(message, bot):
    add_state_user(message.chat.id, 'reg_customer_name')
    bot.send_message(message.chat.id, '–í–≤–µ–¥—ñ—Ç—å –≤–∞—à –ü–Ü–ë', reply_markup=skip_keyboard())


def reg_customer_phone(message, bot):
    change_customer_name(message.chat.id, message.text)
    add_state_user(message.chat.id, 'reg_customer_phone')
    bot.send_message(message.chat.id, '–í–≤–µ–¥—ñ—Ç—å –∞–±–æ —Ä–æ–∑—à–∞—Ä—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É.', reply_markup=number_keyboard())


def reg_customer_city(message, bot):
    if message.content_type == 'contact':
        customer_phone = message.contact.phone_number
    else:
        customer_phone = message.text
        if not validate_phone_number(customer_phone):
            return bot.send_message(message.chat.id, '–í–≤–µ–¥—ñ—Ç—å –∫–æ—Ä—Ä–µ–∫—Ç–Ω–∏–π –Ω–æ–º–µ—Ä.')

    change_customer_phone(message.chat.id, customer_phone)
    add_state_user(message.chat.id, 'reg_customer_city')
    bot.send_message(message.chat.id, '–í–≤–µ–¥—ñ—Ç—å –í–∞—à–µ –º—ñ—Å—Ç–æ.', reply_markup=skip_keyboard())


def reg_customer_finish(message, bot):
    user = get_user(message.chat.id)
    change_customer_city(message.chat.id, message.text)
    add_state_user(message.chat.id)

    bot.send_message(message.chat.id, f'–î—è–∫—É—é –∑–∞ —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—é, {user.customer_name}!\n\n'
                                      f'–¢–µ–ø–µ—Ä –í–∏ –º–æ–∂–µ—Ç–µ –ø–µ—Ä–µ–π—Ç–∏ –¥–æ –ø–æ–∫—É–ø–æ–∫.')
    start_message(message, bot)


def registration_skip(message, bot):
    add_state_user(message.chat.id)
    start_message(message, bot)


def show_catalog(obj, bot, page_num=1):
    keyboard = types.InlineKeyboardMarkup(row_width=2)
    keyboard_page_btn = []
    categories = get_categories()
    paginator = Paginator(categories, 10)
    items_per_page = paginator.get_page(page_num)

    for item in items_per_page:
        keyboard.add(types.InlineKeyboardButton(item.name, callback_data=f'product_list|{item.pk}'))

    if items_per_page.has_previous():
        next_page = items_per_page.previous_page_number()
        keyboard_page_btn.append(types.InlineKeyboardButton('‚¨ÖÔ∏è', callback_data=f'category_list|{next_page}'))

    if items_per_page.has_next():
        next_page = items_per_page.next_page_number()
        keyboard_page_btn.append(types.InlineKeyboardButton('‚û°Ô∏è', callback_data=f'category_list|{next_page}'))

    keyboard.add(*keyboard_page_btn)

    if page_num == 1:
        bot.send_message(obj.chat.id, '–û–±–µ—Ä—ñ—Ç—å –∫–∞—Ç–µ–≥–æ—Ä—ñ—é —è–∫–∞ –í–∞—Å —Ü—ñ–∫–∞–≤–∏—Ç—å:', reply_markup=keyboard)
    else:
        bot.edit_message_reply_markup(obj.message.chat.id, obj.message.message_id, reply_markup=keyboard)


def show_products(obj, bot, category_id, page_num=1):
    products = get_product_by_category(category_id)
    paginator = Paginator(products, 5)
    products_per_page = paginator.get_page(page_num)

    if not products:
        bot.send_message(obj.message.chat.id, '–ù–∞–∂–∞–ª—å, –∞–∫—Ç–∏–≤–Ω–∏—Ö —Ç–æ–≤–∞—Ä—ñ–≤ –≤ —Ü—ñ–π –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó –Ω–µ–º–∞—î.')
        show_catalog(obj.message, bot)

    for index, product in enumerate(products_per_page, start=1):
        keyboard = types.InlineKeyboardMarkup(row_width=1)

        product_text = f'<b>{product.title}</b>\n\n' \
                       f'{product.excerpt}\n\n' \
                       f'<b>–¶—ñ–Ω–∞:</b> {product.price}'

        if not product.quantity:
            product_text += '\n\n<i>–ù–∞–∂–∞–ª—å, —Ç–æ–≤–∞—Ä—É –ø–æ–∫–∏ –Ω–µ–º–∞—î –≤ –Ω–∞—è–≤–Ω–æ—Å—Ç—ñ.</i>'

        keyboard.add(types.InlineKeyboardButton('‚ÑπÔ∏è –ü–æ–¥—Ä–æ–±–∏—Ü—ñ', callback_data=f'product|{product.pk}'))

        if page_num != 1:
            bot.edit_message_reply_markup(obj.message.chat.id, obj.message.message_id, reply_markup=keyboard)

        if index == len(products_per_page) and products_per_page.has_next():
            next_page = products_per_page.next_page_number()
            keyboard.add(types.InlineKeyboardButton('–ó–∞–≥—Ä—É–∑–∏—Ç–∏ –±—ñ–ª—å—à–µ —Ç–æ–≤–∞—Ä—ñ–≤',
                                                    callback_data=f'products_more|{product.category.pk}|{next_page}'))

        if product.image:
            bot.send_photo(obj.message.chat.id, product.image, product_text, reply_markup=keyboard)
        else:
            bot.send_message(obj.message.chat.id, product_text, reply_markup=keyboard)


def show_about_shop(message, bot):
    about = get_about_shop()

    if about:
        bot.send_message(message.chat.id, about, reply_markup=back_to_main_keyboard())
    else:
        bot.send_message(message.chat.id, '–ù–∞–∂–∞–ª—å, –ø–æ–∫–∏ –Ω–µ–º–∞—î —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó –ø—Ä–æ –º–∞–≥–∞–∑–∏–Ω.',
                         reply_markup=back_to_main_keyboard())


# Keyboards
def main_keyboard():
    keyboard = types.ReplyKeyboardMarkup(row_width=2, resize_keyboard=True,
                                         one_time_keyboard=True)

    keyboard.add(types.KeyboardButton('üõç –ö–∞—Ç–∞–ª–æ–≥'),
                 types.KeyboardButton('üõí –ö–æ—Ä–∑–∏–Ω–∞'))
    keyboard.add(types.KeyboardButton('‚ÑπÔ∏è –ü—Ä–æ –º–∞–≥–∞–∑–∏–Ω'),
                 types.KeyboardButton('üë§ –ú–æ—ó –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è'))

    return keyboard


def registration_keyboard():
    keyboard = types.ReplyKeyboardMarkup(row_width=2, resize_keyboard=True,
                                         one_time_keyboard=True)

    keyboard.add(types.KeyboardButton('–ó–∞—Ä–µ—î—Å—Ç—Ä—É–≤–∞—Ç–∏—Å—è'))
    keyboard.add(types.KeyboardButton('–ü—Ä–æ–ø—É—Å—Ç–∏—Ç–∏ —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—é'))

    return keyboard


def number_keyboard():
    keyboard = types.ReplyKeyboardMarkup(row_width=2, resize_keyboard=True, one_time_keyboard=True)

    keyboard.add(types.KeyboardButton('–ü–æ–¥—ñ–ª–∏—Ç–∏—Å—è –Ω–æ–º–µ—Ä–æ–º', request_contact=True))
    keyboard.add(types.KeyboardButton('–ü—Ä–æ–ø—É—Å—Ç–∏—Ç–∏ —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—é'))

    return keyboard


def skip_keyboard():
    keyboard = types.ReplyKeyboardMarkup(row_width=1, resize_keyboard=True, one_time_keyboard=True)

    keyboard.add(types.KeyboardButton('–ü—Ä–æ–ø—É—Å—Ç–∏—Ç–∏ —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—é'))

    return keyboard


def back_to_main_keyboard():
    keyboard = types.ReplyKeyboardMarkup(row_width=1, resize_keyboard=True, one_time_keyboard=True)

    keyboard.add(types.KeyboardButton('üîô –î–æ –≥–æ–ª–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é'))

    return keyboard
