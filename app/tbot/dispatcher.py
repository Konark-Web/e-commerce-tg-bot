import requests

from telebot import types
from itertools import chain
from django.core.paginator import Paginator

from . import keyboards as kb
from tbot.models import BotConfig
from shop.models import Category, Product, ProductImage, Shop, Order, OrderItem

from tbot.modules.customer import (get_or_create_user, add_state_user, change_customer_name,
                                   change_customer_phone, change_customer_city, change_customer_address,
                                   get_user_by_id)
from tbot.modules.catalog import get_product_by_id
from tbot.modules.cart import (get_or_create_cart, get_or_create_cart_item, get_cart_item_by_id,
                               get_cart_items, is_product_empty_by_item, has_user_empty_products,
                               cart_total_changed, cart_quantity_changed)
from tbot.modules.order import create_order
from tbot.modules.additional_functions import validate_phone_number, get_nova_poshta_api


def start_message(message, bot):
    user_info = {
        'telegram_id': message.from_user.id,
        'username': message.from_user.username,
    }

    customer, new_customer = get_or_create_user(user_info)
    add_state_user(message.from_user.id)

    if new_customer:
        bot.send_message(message.from_user.id,
                         '–í—ñ—Ç–∞—î–º–æ!\n\n'
                         '–í–∞—Å –≤—ñ—Ç–∞—î –º–∞–≥–∞–∑–∏–Ω –∫–∞–ª—å—è–Ω–Ω–∏—Ö –∞–∫—Å–µ—Å—É–∞—Ä—ñ–≤. '
                         '–£ –Ω–∞—Å –í–∏ –∑–º–æ–∂–µ—Ç–µ –∫—É–ø–∏—Ç–∏ –≤—Å–µ –¥–ª—è –∫–æ–º—Ñ–æ—Ä—Ç–Ω–æ–≥–æ –ø—Ä–æ–≤–µ–¥–µ–Ω–Ω—è —á–∞—Å—É.\n\n'
                         '–î–∞–≤–∞–π—Ç–µ –ø—Ä–æ–π–¥–µ–º–æ –∫–æ—Ä–æ—Ç–∫—É —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—é, –∞–ª–µ –í–∏ –º–æ–∂–µ—Ç–µ —ó—ó –ø—Ä–æ–ø—É—Å—Ç–∏—Ç–∏.',
                         reply_markup=kb.registration_keyboard())
    else:
        bot.send_message(message.from_user.id,
                         '<b>–í–∏ –ø–µ—Ä–µ–π—à–ª–∏ –¥–æ –≥–æ–ª–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é.</b>\n\n'
                         'üõç –ö–∞—Ç–∞–ª–æ–≥ - –ø–æ—à—É–∫ —Ç–∞ –∫—É–ø—ñ–≤–ª—è —Ç–æ–≤–∞—Ä—É\n'
                         'üõí –ö–æ—Ä–∑–∏–Ω–∞ - –æ—Ñ–æ—Ä–º–ª–µ–Ω–Ω—è –∑–∞–º–æ–≤–ª–µ–Ω—å\n'
                         '‚ÑπÔ∏è –ü—Ä–æ –º–∞–≥–∞–∑–∏–Ω - –±—ñ–ª—å—à–µ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó –ø—Ä–æ –Ω–∞—Å\n'
                         'üë§ –ú–æ—ó –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è - –ø–µ—Ä–µ–≥–ª—è–¥ –ø–æ–ø–µ—Ä–µ–¥–Ω—ñ—Ö –∑–∞–º–æ–≤–ª–µ–Ω—å\n'
                         'üîé –ü–æ—à—É–∫ - –ø–æ—à—É–∫ –ø–æ –∫–∞—Ç–∞–ª–æ–≥—É —Ç–æ–≤–∞—Ä—ñ–≤ –º–∞–≥–∞–∑–∏–Ω—É',
                         reply_markup=kb.main_keyboard())


def reg_customer_name(message, bot):
    add_state_user(message.from_user.id, 'reg_customer_name')
    bot.send_message(message.from_user.id, '–í–≤–µ–¥—ñ—Ç—å –≤–∞—à –ü–Ü–ë', reply_markup=kb.skip_keyboard())


def reg_customer_phone(message, bot):
    change_customer_name(message.from_user.id, message.text)
    add_state_user(message.from_user.id, 'reg_customer_phone')
    bot.send_message(message.from_user.id,
                     '–í–≤–µ–¥—ñ—Ç—å –∞–±–æ —Ä–æ–∑—à–∞—Ä—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É.',
                     reply_markup=kb.number_keyboard())


def reg_customer_city(message, bot):
    customer_phone = get_phone_number(message, bot)
    if not customer_phone:
        return

    change_customer_phone(message.from_user.id, customer_phone)
    add_state_user(message.from_user.id, 'reg_customer_city')
    bot.send_message(message.from_user.id, '–í–≤–µ–¥—ñ—Ç—å –∞–±–æ –≤–∏–±–µ—Ä—ñ—Ç—å –∑ —Å–ø–∏—Å–∫—É —Å–≤–æ—î –º—ñ—Å—Ç–æ.', reply_markup=kb.skip_keyboard())
    bot.send_message(message.from_user.id,
                     f'–î–ª—è –ø–æ—à—É–∫—É –º—ñ—Å—Ç–∞ –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å "–ü–æ—à—É–∫" —Ç–∞ –≤–≤–µ–¥—ñ—Ç—å –Ω–∞–∑–≤—É –Ω–∞—Å–µ–ª–µ–Ω–Ω–æ–≥–æ –ø—É–Ω–∫—Ç—É.',
                     reply_markup=kb.search_keyboard())


def reg_customer_finish(message, bot):
    user_id = message.from_user.id
    if message.result_id:
        customer_city = message.result_id.split('|')[-1]
    else:
        customer_city = message.text

    user = get_user_by_id(user_id)
    change_customer_city(user_id, customer_city)
    add_state_user(user_id)

    bot.send_message(user_id, f'–î—è–∫—É—é –∑–∞ —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—é, {user.customer_name}!\n\n'
                              f'–¢–µ–ø–µ—Ä –í–∏ –º–æ–∂–µ—Ç–µ –ø–µ—Ä–µ–π—Ç–∏ –¥–æ –ø–æ–∫—É–ø–æ–∫.')
    start_message(message, bot)


def registration_skip(message, bot):
    add_state_user(message.from_user.id)
    start_message(message, bot)


def show_catalog(obj, bot, page_num=1):
    keyboard = types.InlineKeyboardMarkup(row_width=2)
    keyboard_page_btn = []
    categories = Category.objects.filter(is_active=True).distinct()
    paginator = Paginator(categories, 10)
    items_per_page = paginator.get_page(page_num)

    for item in items_per_page:
        keyboard.add(types.InlineKeyboardButton(item.name, callback_data=f'product_list|{item.pk}'))

    if items_per_page.has_previous():
        next_page = items_per_page.previous_page_number()
        keyboard_page_btn.append(types.InlineKeyboardButton('‚¨ÖÔ∏è', callback_data=f'category_list|{next_page}'))

    if items_per_page.has_next():
        next_page = items_per_page.next_page_number()
        keyboard_page_btn.append(types.InlineKeyboardButton('‚û°Ô∏è', callback_data=f'category_list|{next_page}'))

    keyboard.add(*keyboard_page_btn)

    if page_num == 1:
        bot.send_message(obj.chat.id, '–û–±–µ—Ä—ñ—Ç—å –∫–∞—Ç–µ–≥–æ—Ä—ñ—é —è–∫–∞ –í–∞—Å —Ü—ñ–∫–∞–≤–∏—Ç—å:', reply_markup=keyboard)
    else:
        bot.edit_message_reply_markup(obj.from_user.id, obj.message.message_id, reply_markup=keyboard)


def show_products_list(obj, bot, category_id, page_num=1):
    products_stock = Product.objects.filter(category=category_id, quantity__gt=0, is_active=True).distinct()
    products_out_of_stock = Product.objects.filter(category=category_id, quantity__lte=0, is_active=True).distinct()
    products = list(
        sorted(
            chain(products_stock, products_out_of_stock),
            key=lambda objects: objects.is_active
        )
    )
    paginator = Paginator(products, 5)
    products_per_page = paginator.get_page(page_num)

    category = Category.objects.filter(pk=category_id).first()
    bot.send_message(obj.from_user.id,
                     f'üõç –ö–∞—Ç–∞–ª–æ–≥ —Ç–æ–≤–∞—Ä—ñ–≤ –∑ –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó <b>{category.name}</b>\n'
                     f'–°—Ç–æ—Ä—ñ–Ω–∫–∞ {products_per_page.number}/{products_per_page.paginator.num_pages}')

    if not products:
        bot.send_message(obj.from_user.id, '–ù–∞–∂–∞–ª—å, –∞–∫—Ç–∏–≤–Ω–∏—Ö —Ç–æ–≤–∞—Ä—ñ–≤ –≤ —Ü—ñ–π –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó –Ω–µ–º–∞—î.')
        show_catalog(obj.message, bot)

    for index, product in enumerate(products_per_page, start=1):
        keyboard = types.InlineKeyboardMarkup(row_width=1)

        product_text = f'<b>{product.title}</b>\n\n' \
                       f'{product.excerpt}\n\n' \
                       f'<b>–¶—ñ–Ω–∞:</b> {product.price}'

        if not product.quantity:
            product_text += '\n\n<i>–ù–∞–∂–∞–ª—å, —Ç–æ–≤–∞—Ä—É –ø–æ–∫–∏ –Ω–µ–º–∞—î –≤ –Ω–∞—è–≤–Ω–æ—Å—Ç—ñ.</i>'

        keyboard.add(types.InlineKeyboardButton('‚ÑπÔ∏è –ü–æ–¥—Ä–æ–±–∏—Ü—ñ', callback_data=f'product_item|{product.pk}'))

        if page_num != 1:
            bot.edit_message_reply_markup(obj.from_user.id, obj.message.message_id, reply_markup=keyboard)

        if index == len(products_per_page) and products_per_page.has_next():
            next_page = products_per_page.next_page_number()
            keyboard.add(types.InlineKeyboardButton('–ó–∞–≥—Ä—É–∑–∏—Ç–∏ –±—ñ–ª—å—à–µ —Ç–æ–≤–∞—Ä—ñ–≤',
                                                    callback_data=f'products_more|{product.category.pk}|{next_page}'))

        if product.image:
            bot.send_photo(obj.from_user.id, product.image, product_text, reply_markup=keyboard)
        else:
            bot.send_message(obj.from_user.id, product_text, reply_markup=keyboard)


def show_product(obj, bot, product_id, img_num=1):
    keyboard = types.InlineKeyboardMarkup(row_width=2)

    product = Product.objects.filter(pk=product_id)
    images = ProductImage.objects.filter(product__pk=product_id)

    product_images = list(
        sorted(
            chain(product, images),
            key=lambda objects: objects.pk
        )
    )

    product = product[0]
    paginator = Paginator(product_images, 1)
    product_image = paginator.get_page(img_num)

    product_text = f'<b>{product.title}</b>\n\n' \
                   f'{product.description}\n\n' \
                   f'<b>–¶—ñ–Ω–∞:</b> {product.price}'

    if product.quantity:
        product_text += f'\n<b>–£ –Ω–∞—è–≤–Ω–æ—Å—Ç—ñ:</b> {product.quantity}'
        keyboard.add(types.InlineKeyboardButton('üõí –î–æ–¥–∞—Ç–∏ –¥–æ –∫–æ—Ä–∑–∏–Ω–∏', callback_data=f'add_to_cart|{product_id}'))
    else:
        product_text += f'\n\n<i>–ù–∞–∂–∞–ª—å, —Ç–æ–≤–∞—Ä—É –ø–æ–∫–∏ –Ω–µ–º–∞—î –≤ –Ω–∞—è–≤–Ω–æ—Å—Ç—ñ.</i>'

    if paginator.num_pages > 1:
        if product_image.has_previous():
            prev_image = product_image.previous_page_number()
        else:
            prev_image = paginator.num_pages

        if product_image.has_next():
            next_image = product_image.next_page_number()
        else:
            next_image = 1

        keyboard.add(
            types.InlineKeyboardButton('‚¨ÖÔ∏è –ü–æ–ø–µ—Ä–µ–¥–Ω—î —Ñ–æ—Ç–æ', callback_data=f'image_product|{product_id}|{prev_image}'),
            types.InlineKeyboardButton('–ù–∞—Å—Ç—É–ø–Ω–µ —Ñ–æ—Ç–æ ‚û°Ô∏è', callback_data=f'image_product|{product_id}|{next_image}')
        )

    keyboard.add(types.InlineKeyboardButton('üîô –ù–∞–∑–∞–¥', callback_data='hide_product'))
    if product.image:
        if img_num == 1:
            bot.send_photo(obj.from_user.id, product.image, product_text, reply_markup=keyboard)
        else:
            bot.edit_message_media(types.InputMedia(type='photo', media=product_image[0].image),
                                   obj.from_user.id,
                                   obj.message.message_id,
                                   reply_markup=keyboard)
            bot.edit_message_caption(product_text,
                                     obj.from_user.id,
                                     obj.message.message_id,
                                     reply_markup=keyboard)
    else:
        bot.send_message(obj.from_user.id, product_text, reply_markup=keyboard)


def hide_product(obj, bot):
    bot.delete_message(obj.from_user.id, obj.message.message_id)


def add_product_to_cart(obj, bot, product_id):
    cart, new_cart = get_or_create_cart(obj.from_user.id)
    product = get_product_by_id(product_id)
    cart_item, cart_item_new = get_or_create_cart_item(cart, product)

    if not cart_item_new:
        if cart_item.quantity >= product.quantity:
            bot.answer_callback_query(obj.id, '–ù–∞–∂–∞–ª—å, –ø–æ–∫–∏ —Ü–µ –≤—Å–µ —â–æ —î –≤ –Ω–∞—è–≤–Ω–æ—Å—Ç—ñ.', False)
        else:
            cart_item.quantity = cart_item.quantity + 1
            cart_item.save()

            bot.answer_callback_query(obj.id,
                                      f'–î–æ–¥–∞–Ω–æ —â–µ 1 –æ–¥–∏–Ω–∏—Ü—é —Ç–æ–≤–∞—Ä—É –¥–æ –∫–æ—Ä–∑–∏–Ω–∏. –ó–∞—Ä–∞–∑ —É –∫–æ—Ä–∑–∏–Ω—ñ: {cart_item.quantity}',
                                      show_alert=False)
    else:
        bot.send_message(obj.from_user.id,
                         get_cart_item_text(product_title=product.title),
                         reply_markup=kb.item_control_with_cart_keyboard(cart_item.pk))


def remove_product_from_cart(obj, bot, item_id, is_cart=False):
    cart_item = get_cart_item_by_id(item_id)
    cart_item.is_active = False
    cart_item.save()

    bot.delete_message(obj.from_user.id, obj.message.message_id)
    bot.answer_callback_query(obj.id,
                              f'–¢–æ–≤–∞—Ä —É—Å–ø—ñ—à–Ω–æ –≤–∏–¥–∞–ª–µ–Ω–∏–π —Å –∫–æ—Ä–∑–∏–Ω–∏.',
                              show_alert=False)

    if is_cart:
        subtotal_message, subtotal_keyboard = get_subtotal_text_and_keyboard(cart_item.cart)
        bot.edit_message_text(text=subtotal_message,
                              chat_id=obj.from_user.id,
                              message_id=cart_item.cart.total_message_id,
                              reply_markup=subtotal_keyboard)


def remove_empty_products(obj, bot):
    cart = get_or_create_cart(obj.from_user.id)
    cart_items = get_cart_items(cart[0].pk)
    count = 0

    for item in cart_items:
        if is_product_empty_by_item(item):
            item.is_active = False
            item.save()

            count += 1

    bot.send_message(obj.from_user.id, f'–ù–µ–∞–∫—Ç–∏–≤–Ω—ñ —Ç–æ–≤–∞—Ä–∏ —É—Å–ø—ñ—à–Ω–æ –≤–∏–¥–∞–ª–µ–Ω—ñ –∑ –∫–æ—Ä–∑–∏–Ω–∏ —É –∫—ñ–ª—å–∫–æ—Å—Ç—ñ: {count}')
    show_cart(obj, bot)


def add_one_more_item(obj, bot, item_id, is_cart=False):
    cart_item = get_cart_item_by_id(item_id)

    if not cart_item.is_active:
        add_product_to_cart(obj, bot, cart_item.product.pk)

    if cart_item.quantity >= cart_item.product.quantity:
        bot.answer_callback_query(obj.id, '–ù–∞–∂–∞–ª—å, –ø–æ–∫–∏ —Ü–µ –≤—Å–µ —â–æ —î –≤ –Ω–∞—è–≤–Ω–æ—Å—Ç—ñ.', False)
    else:
        cart_item.quantity = cart_item.quantity + 1
        cart_item.save()

        get_item_text_and_keyboard(obj, bot, cart_item, is_cart)
        bot.answer_callback_query(obj.id, f'–î–æ–¥–∞–Ω–æ 1 –æ–¥–∏–Ω–∏—Ü—é —Ç–æ–≤–∞—Ä—É –¥–æ –∫–æ—Ä–∑–∏–Ω–∏.', show_alert=False)


def remove_one_item(obj, bot, item_id, is_cart=False):
    cart_item = get_cart_item_by_id(item_id)

    if cart_item.quantity <= 1:
        bot.answer_callback_query(obj.id,
                                  '–ú–µ–Ω—å—à–µ –≤–∂–µ –Ω–µ–º–∞—î –∫—É–¥–∏. –ú–æ–∂–µ—Ç–µ —Ç—ñ–ª—å–∫–∏ –≤–∏–¥–∞–ª–∏—Ç–∏ —Ç–æ–≤–∞—Ä –∑ –∫–æ—Ä–∑–∏–Ω–∏.',
                                  show_alert=False)
    else:
        cart_item.quantity = cart_item.quantity - 1
        cart_item.save()

        get_item_text_and_keyboard(obj, bot, cart_item, is_cart)
        bot.answer_callback_query(obj.id, f'–í–∏–¥–∞–ª–µ–Ω–æ 1 –æ–¥–∏–Ω–∏—Ü—é —Ç–æ–≤–∞—Ä—É –∑ –∫–æ—Ä–∑–∏–Ω–∏.', show_alert=False)


def show_cart(obj, bot):
    cart, new_cart = get_or_create_cart(obj.from_user.id)
    cart_items = get_cart_items(cart)

    if isinstance(obj, types.CallbackQuery):
        bot.send_message(obj.from_user.id, 'üõí –ö–æ—Ä–∑–∏–Ω–∞', reply_markup=kb.main_keyboard())

    if not cart_items:
        bot.send_message(obj.from_user.id, '–ù–∞–∂–∞–ª—å, –∫–æ—Ä–∑–∏–Ω–∞ –ø–æ–∫–∏ —â–æ –ø–æ—Ä–æ–∂–Ω—è.', reply_markup=kb.main_keyboard())
        return

    for item in cart_items:
        item_quantity = item.quantity
        item_price = item.product.price
        item_subtotal = item_quantity * item_price

        item_keyboard = kb.item_control_keyboard(item.pk, is_cart=True)
        text_message = get_cart_item_text(product_title=item.product.title,
                                          quantity=item_quantity,
                                          price=item_price,
                                          subtotal=item_subtotal,
                                          is_cart=True,
                                          item=item)

        if item.product.image:
            bot.send_photo(chat_id=obj.from_user.id,
                           photo=item.product.image,
                           caption=text_message,
                           reply_markup=item_keyboard)
        else:
            bot.send_message(chat_id=obj.from_user.id,
                             text=text_message,
                             reply_markup=item_keyboard)

    subtotal_message, keyboard = get_subtotal_text_and_keyboard(cart)
    cart_total_obj = bot.send_message(chat_id=obj.from_user.id, text=subtotal_message, reply_markup=keyboard)

    cart.total_message_id = cart_total_obj.message_id
    cart.save()


def new_order_customer_name(obj, bot, need_change=False):
    user_id = obj.from_user.id
    user = get_user_by_id(user_id)

    if cart_changed(obj, bot):
        return

    if (user.customer_name and user.phone_number and user.address) and not need_change:
        new_order_finish(obj, bot, True, True)
        return

    bot.send_message(obj.from_user.id, '–î–∞–≤–∞–π—Ç–µ –ø–æ—á–Ω–µ–º–æ –æ—Ñ–æ—Ä–º–ª—é–≤–∞—Ç–∏ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è.')
    add_state_user(user_id, 'new_order_customer_name')

    if user.customer_name:
        bot.send_message(chat_id=user_id,
                         text=f'–£ –í–∞—Å –≤–∂–µ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω–µ —ñ–º\'—è. –í–≤–µ–¥—ñ—Ç—å –Ω–æ–≤–µ —á–∏ –ø—ñ–¥—Ç–≤–µ—Ä–¥—ñ—Ç—å –ø–æ—Ç–æ—á–Ω–µ.\n'
                              f'–ó–∞—Ä–∞–∑: {user.customer_name}',
                         reply_markup=kb.order_keyboard(True))
    else:
        bot.send_message(chat_id=user_id,
                         text=f'–í–≤–µ–¥—ñ—Ç—å —ñ–º\'—è –ª—é–¥–∏–Ω–∏ —è–∫–∞ –±—É–¥–µ –∑–∞–±–∏—Ä–∞—Ç–∏ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è.',
                         reply_markup=kb.order_keyboard())


def new_order_phone(obj, bot, confirmed=False):
    user_id = obj.from_user.id
    user = get_user_by_id(user_id)

    if not confirmed:
        user = change_customer_name(user_id, obj.text)
        bot.send_message(user_id, f'‚úÖ –Ü–º\'—è —É—Å–ø—ñ—à–Ω–æ –∑–º—ñ–Ω–µ–Ω–æ –Ω–∞ {user.customer_name}.')

    add_state_user(user_id, 'new_order_phone')

    if user.phone_number:
        bot.send_message(chat_id=user_id,
                         text=f'–£ –í–∞—Å –≤–∂–µ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω–∏–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É. '
                              f'–í–≤–µ–¥—ñ—Ç—å –Ω–æ–≤–∏–π (–∞–±–æ –ø–æ—à–∏—Ä—Ç–µ –∑–∞ –¥–æ–ø–æ–º–æ–≥–æ—é –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂—á–µ) —á–∏ –ø—ñ–¥—Ç–≤–µ—Ä–¥—ñ—Ç—å –ø–æ—Ç–æ—á–Ω–∏–π.\n'
                              f'–ó–∞—Ä–∞–∑: {user.phone_number}',
                         reply_markup=kb.order_keyboard(info=True, number=True))
    else:
        bot.send_message(chat_id=user_id,
                         text=f'–í–≤–µ–¥—ñ—Ç—å –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É –∞–±–æ –ø–æ—à–∏—Ä—Ç–µ –π–æ–≥–æ –∑–∞ –¥–æ–ø–æ–º–æ–≥–æ—é –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂—á–µ.',
                         reply_markup=kb.order_keyboard(number=True))


def new_order_delivery(obj, bot, confirmed=False):
    user_id = obj.from_user.id
    user = get_user_by_id(user_id)
    keyboard = kb.search_keyboard()

    if not confirmed:
        customer_phone = get_phone_number(obj, bot)
        if not customer_phone:
            return

        user = change_customer_phone(user_id, customer_phone)
        bot.send_message(user_id, f'‚úÖ –ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É —É—Å–ø—ñ—à–Ω–æ –∑–º—ñ–Ω–µ–Ω–æ –Ω–∞ {user.phone_number}.')

    add_state_user(user_id, 'new_order_delivery')

    if user.city and user.address:
        bot.send_message(chat_id=user_id,
                         text=f'–£ –í–∞—Å –≤–∂–µ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –∞–¥—Ä–µ—Å–∞ –¥–æ—Å—Ç–∞–≤–∫–∏. '
                              f'–í–∏–±–µ—Ä—ñ—Ç—å –Ω–æ–≤—É —É —Ñ–æ—Ä–º—ñ –ø–æ—à—É–∫—É –Ω–∏–∂—á–µ —á–∏ –ø—ñ–¥—Ç–≤–µ—Ä–¥—ñ—Ç—å –ø–æ—Ç–æ—á–Ω—É.\n'
                              f'–ó–∞—Ä–∞–∑: {user.address}, {user.city} ',
                         reply_markup=kb.order_keyboard(info=True))
    else:
        if user.city:
            keyboard = types.InlineKeyboardMarkup(row_width=1)
            keyboard.add(types.InlineKeyboardButton('–ü–æ—à—É–∫', switch_inline_query_current_chat=user.city))

        bot.send_message(chat_id=user_id,
                         text=f'–í–∏–±–µ—Ä—ñ—Ç—å –≤—ñ–¥–¥—ñ–ª–µ–Ω–Ω—è –ù–æ–≤–æ—ó –ü–æ—à—Ç–∏ —É —Ñ–æ—Ä–º—ñ –ø–æ—à—É–∫—É –Ω–∏–∂—á–µ.',
                         reply_markup=kb.order_keyboard())

    bot.send_message(obj.from_user.id,
                     f'–î–ª—è –ø–æ—à—É–∫—É –≤—ñ–¥–¥—ñ–ª–µ–Ω–Ω—è –ù–æ–≤–æ—ó –ü–æ—à—Ç–∏ –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å "–ü–æ—à—É–∫" —Ç–∞ –≤–≤–µ–¥—ñ—Ç—å –Ω–∞–∑–≤—É –Ω–∞—Å–µ–ª–µ–Ω–Ω–æ–≥–æ –ø—É–Ω–∫—Ç—É.',
                     reply_markup=keyboard)


def new_order_finish(obj, bot, confirmed=False, from_cart=False):
    user_id = obj.from_user.id
    user = get_user_by_id(user_id)
    add_state_user(user_id, 'new_order_finish')

    if not confirmed:
        response = requests.post('https://api.novaposhta.ua/v2.0/json/', json={
            "modelName": "Address",
            "calledMethod": "getWarehouses",
            "methodProperties": {
                "Ref": obj.result_id
            },
            "apiKey": get_nova_poshta_api()
        })

        nova_poshta_post = response.json()['data']
        change_customer_city(user_id, city=nova_poshta_post[0]['CityDescription'])

        user = change_customer_address(user_id,
                                       address=nova_poshta_post[0]['Description'],
                                       post_number=nova_poshta_post[0]['Number'])

    keyboard = types.InlineKeyboardMarkup(row_width=2)
    keyboard.add(types.InlineKeyboardButton('–ü—ñ–¥—Ç–≤–µ—Ä–¥–∏—Ç–∏', callback_data='confirm_order'),
                 types.InlineKeyboardButton('–ó–º—ñ–Ω–∏—Ç–∏', callback_data='change_order_info'))

    if from_cart:
        bot.send_message(user_id, '–û—Å—Ç–∞–Ω–Ω—ñ–π –∫—Ä–æ–∫.', reply_markup=kb.back_to_cart_keyboard())
    else:
        bot.send_message(user_id, '–ú–∏ –≤–∂–µ –Ω–∞ —Ñ—ñ–Ω—ñ—à—ñ.', reply_markup=kb.order_keyboard())

    bot.send_message(user_id,
                     f'–ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ –∫–æ—Ä–µ–∫—Ç–Ω—ñ—Å—Ç—å –¥–∞–Ω–Ω–∏—Ö –¥–ª—è –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è:\n'
                     f'–Ü–º\'—è: {user.customer_name}\n'
                     f'–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É: {user.phone_number}\n'
                     f'–ê–¥—Ä–µ—Å–∞ –¥–æ—Å—Ç–∞–≤–∫–∏: {user.address}, {user.city}',
                     reply_markup=keyboard)


def create_new_order(obj, bot):
    user_id = obj.from_user.id
    add_state_user(user_id)

    if cart_changed(obj, bot):
        return

    order = create_order(user_id)
    if order:
        bot.send_message(user_id, f'–ó–∞–º–æ–≤–ª–µ–Ω–Ω—è ‚Ññ{order.pk} —É—Å–ø—ñ—à–Ω–æ —Å—Ç–≤–æ—Ä–µ–Ω–Ω–∏–π!', reply_markup=kb.main_keyboard())
    else:
        bot.send_message(user_id,
                         '–ú–æ–∂–ª–∏–≤–æ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –≤–∂–µ —Å—Ç–≤–æ—Ä–µ–Ω–æ, —á–∏ –∫–æ—Ä–∑–∏–Ω–∞ –ø–æ—Ä–æ–∂–Ω—è.',
                         reply_markup=kb.main_keyboard())


def search_nova_poshta(search, query, bot):
    inlines = []
    response = requests.post('https://api.novaposhta.ua/v2.0/json/', json={
        "modelName": "Address",
        "calledMethod": "getWarehouses",
        "methodProperties": {
            "CityName": search
        },
        "apiKey": get_nova_poshta_api()
    })

    nova_poshta_posts = response.json()['data']
    offset = int(query.offset) if query.offset else 0

    for result in nova_poshta_posts:
        inlines.append(types.InlineQueryResultArticle(
            id=result['Ref'],
            title=result['ShortAddress'],
            description=result['Description'],
            input_message_content=types.InputVenueMessageContent(
                latitude=float(result['Latitude']),
                longitude=float(result['Longitude']),
                title=result['Description'],
                address=result['ShortAddress']
            )
        ))

    next_offset = f"{offset + 10}"
    bot.answer_inline_query(
        inline_query_id=query.id,
        results=inlines[offset: offset + 10],
        cache_time=0,
        next_offset=next_offset
    )


def search_city(search, query, bot):
    inlines = []
    response = requests.post('https://api.novaposhta.ua/v2.0/json/', json={
        "modelName": "AddressGeneral",
        "calledMethod": "getSettlements",
        "methodProperties": {
            "FindByString": search
        },
        "apiKey": get_nova_poshta_api()
    })

    cities = response.json()['data']
    offset = int(query.offset) if query.offset else 0

    for result in cities:
        title = f'{result["Description"]} ({result["SettlementTypeDescription"]})'

        if result['RegionsDescription']:
            description = f'{result["RegionsDescription"]}, {result["AreaDescription"]}'
        else:
            description = f'{result["AreaDescription"]}'

        inlines.append(types.InlineQueryResultArticle(
            id=f'{result["Ref"]}|{result["Description"]}',
            title=title,
            description=description,
            input_message_content=types.InputVenueMessageContent(
                latitude=float(result['Latitude']),
                longitude=float(result['Longitude']),
                title=result['Description'],
                address=f'{result["Description"]}, {result["AreaDescription"]}'
            )
        ))

    next_offset = f"{offset + 10}"
    bot.answer_inline_query(
        inline_query_id=query.id,
        results=inlines[offset: offset + 10],
        cache_time=0,
        next_offset=next_offset
    )


def new_order_skip(obj, bot):
    add_state_user(user_id=obj.from_user.id)
    bot.send_message(obj.from_user.id, 'üõí –ö–æ—Ä–∑–∏–Ω–∞', reply_markup=kb.main_keyboard())
    show_cart(obj, bot)


def show_user_orders(obj, bot, page_num=1):
    user_id = obj.from_user.id

    orders = Order.objects.filter(customer=user_id)
    paginator = Paginator(orders, 5)
    orders_per_page = paginator.get_page(page_num)

    if not orders:
        bot.send_message(obj.from_user.id, '–í–∏ –ø–æ–∫–∏ —â–æ –Ω–µ –Ω—ñ—á–æ–≥–æ –Ω–µ –∫—É–ø–∏–ª–∏.', reply_markup=kb.back_to_main_keyboard())
        return

    if page_num == 1:
        bot.send_message(user_id, '–°–ø–∏—Å–æ–∫ –í–∞—à–∏—Ö –∑–∞–º–æ–≤–ª–µ–Ω—å:', reply_markup=kb.back_to_main_keyboard())

    keyboard = types.InlineKeyboardMarkup(row_width=1)
    for index, order in enumerate(orders_per_page, start=1):
        order_items = OrderItem.objects.filter(order=order.pk)
        text_message = f'<b>–ó–∞–º–æ–≤–ª–µ–Ω–Ω—è ‚Ññ{order.pk}</b>\n\n'

        for index_item, order_item in enumerate(order_items, start=1):
            text_message += f'{index_item}. {order_item.product.title}\n' \
                            f'–°—É–º–∞: {order_item.total} ({order_item.price} x {order_item.quantity})\n'

        text_message += f'\n\n<b>–ó–∞–≥–∞–ª—å–Ω–∞ —Å—É–º–∞ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è:</b> {order.total}'

        if page_num != 1:
            bot.edit_message_reply_markup(obj.from_user.id, obj.message.message_id, reply_markup=keyboard)

        if index == len(orders_per_page) and orders_per_page.has_next():
            next_page = orders_per_page.next_page_number()
            keyboard.add(types.InlineKeyboardButton('–ó–∞–≥—Ä—É–∑–∏—Ç–∏ –±—ñ–ª—å—à–µ –∑–∞–º–æ–≤–ª–µ–Ω—å',
                                                    callback_data=f'orders_more|{next_page}'))

        bot.send_message(user_id, text_message, reply_markup=keyboard)


def show_about_shop(message, bot):
    about = Shop.objects.filter(is_active=True).first().about

    if about:
        bot.send_message(message.from_user.id, about, reply_markup=kb.back_to_main_keyboard())
    else:
        bot.send_message(message.from_user.id, '–ù–∞–∂–∞–ª—å, –ø–æ–∫–∏ –Ω–µ–º–∞—î —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó –ø—Ä–æ –º–∞–≥–∞–∑–∏–Ω.',
                         reply_markup=kb.back_to_main_keyboard())


def show_search_button(message, bot):
    bot.send_message(message.from_user.id,
                     f'–î–ª—è –ø–æ—à—É–∫–∞ —Ç–æ–≤–∞—Ä—É –≤ –Ω–∞—à–æ–º—É –º–∞–≥–∞–∑–∏–Ω—ñ –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å "–ü–æ—à—É–∫" —Ç–∞ –≤–≤–µ–¥—ñ—Ç—å –Ω–∞–∑–≤—É —Ç–æ–≤–∞—Ä—É.',
                     reply_markup=kb.search_keyboard())


def search_product(search, query, bot):
    inlines = []
    results = Product.objects.filter(title__icontains=search, is_active=True)
    offset = int(query.offset) if query.offset else 0
    bot_url = BotConfig.objects.get(is_active=True).server_url

    for result in results:
        inlines.append(types.InlineQueryResultArticle(
            id=result.pk,
            title=result.title,
            description=result.excerpt,
            thumb_url=bot_url + result.image.url,
            input_message_content=types.InputTextMessageContent(
                message_text=f'–¢–æ–≤–∞—Ä: {result.title}'
            )
        ))

    next_offset = f"{offset + 10}"
    bot.answer_inline_query(
        inline_query_id=query.id,
        results=inlines[offset: offset + 10],
        cache_time=0,
        next_offset=next_offset
    )


# Additional functions
def get_cart_item_text(product_title,
                       quantity=None,
                       price=None,
                       subtotal=None,
                       is_cart=False,
                       only_added=False,
                       item=None):
    if is_cart:
        message_text = f'<b>{product_title}</b>\n\n' \
                       f'–ö—ñ–ª—å–∫—ñ—Å—Ç—å: {quantity}\n' \
                       f'–¶—ñ–Ω–∞ –∑–∞ –µ–¥.: {price}\n' \
                       f'–°—É–º–∞: {subtotal}\n'

        if item and is_product_empty_by_item(item):
            message_text += '\n<b>–ù–∞–∂–∞–ª—å, —Ç–æ–≤–∞—Ä—É –Ω–µ–º–∞—î —É –Ω–∞—è–≤–Ω–æ—Å—Ç—ñ. –ü–µ—Ä–µ–¥ –æ—Ñ–æ—Ä–º–ª–µ–Ω–Ω—è–º –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è,' \
                            ' –±—É–¥—å-–ª–∞—Å–∫–∞ –≤–∏–¥–∞–ª—ñ—Ç—å —Ü–µ–π —Ç–æ–≤–∞—Ä –∑ –∫–æ—Ä–∑–∏–Ω–∏.</b>'

    else:
        message_text = f'<b>–¢–æ–≤–∞—Ä {product_title} –¥–æ–¥–∞–Ω–∏–π —É –∫–æ—Ä–∑–∏–Ω—É.</b>'

        if not only_added and quantity:
            message_text += f'\n\n–ó–∞—Ä–∞–∑ —Ü—å–æ–≥–æ —Ç–æ–≤–∞—Ä—É —É –∫–æ—Ä–∑–∏–Ω—ñ: {quantity}'

    return message_text


def get_item_text_and_keyboard(obj, bot, cart_item, is_cart):
    if is_cart:
        item_quantity = cart_item.quantity
        item_price = cart_item.product.price
        item_subtotal = item_quantity * item_price

        text_message = get_cart_item_text(product_title=cart_item.product.title,
                                          quantity=item_quantity,
                                          price=item_price,
                                          subtotal=item_subtotal,
                                          is_cart=True)
        keyboard = kb.item_control_keyboard(cart_item.pk, is_cart=True)

        subtotal_message, subtotal_keyboard = get_subtotal_text_and_keyboard(cart_item.cart)
        bot.edit_message_text(text=subtotal_message,
                              chat_id=obj.from_user.id,
                              message_id=cart_item.cart.total_message_id,
                              reply_markup=subtotal_keyboard)
    else:
        text_message = get_cart_item_text(product_title=cart_item.product.title,
                                          quantity=cart_item.quantity)
        keyboard = kb.item_control_with_cart_keyboard(cart_item.pk)

    if obj.message.content_type == 'photo':
        bot.edit_message_caption(caption=text_message,
                                 chat_id=obj.from_user.id,
                                 message_id=obj.message.message_id,
                                 reply_markup=keyboard)
    else:
        bot.edit_message_text(text=text_message,
                              chat_id=obj.from_user.id,
                              message_id=obj.message.message_id,
                              reply_markup=keyboard)


def get_subtotal_text_and_keyboard(cart):
    subtotal, quantity = cart.get_subtotal
    product_empty = has_user_empty_products(cart.customer.pk)

    if subtotal:
        subtotal_message = f'–ó–∞–≥–∞–ª—å–Ω–∞—è —Å—É–º–∞ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è: {subtotal} –≥—Ä–Ω.\n\n' \
                           f'–ö—ñ–ª—å–∫—ñ—Å—Ç—å —Ç–æ–≤–∞—Ä—ñ–≤: {quantity}'

        keyboard = types.InlineKeyboardMarkup(row_width=1)
        if not product_empty:
            cart.total_price = subtotal
            cart.save()

            keyboard.add(types.InlineKeyboardButton('–ó—Ä–æ–±–∏—Ç–∏ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è', callback_data='new_order'))
        else:
            keyboard.add(types.InlineKeyboardButton('–í–∏–¥–∞–ª–∏—Ç–∏ –Ω–µ–∞–∫—Ç—É–∞–ª—å–Ω—ñ —Ç–æ–≤–∞—Ä–∏',
                                                    callback_data='remove_empty_products'))
            subtotal_message += '\n\n<b>–î–ª—è —Ç–æ–≥–æ —â–æ–± –ø–æ—á–∞—Ç–∏ –æ—Ñ–æ—Ä–º–ª—é–≤–∞—Ç–∏ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è, –≤–∏–¥–∞–ª—ñ—Ç—å –∑ –∫–æ—Ä–∑–∏–Ω–∏ ' \
                                '—Ç–æ–≤–∞—Ä–∏ —è–∫–∏—Ö –Ω–µ–º–∞—î —É –Ω–∞—è–≤–Ω–æ—Å—Ç—ñ.</b>'
    else:
        subtotal_message = '–í–∂–µ –Ω–µ–º–∞—î —á–æ–≥–æ –∫—É–ø—É–≤–∞—Ç–∏. –î–æ–¥–∞–π—Ç–µ —â–æ—Å—å —ñ –º–∏ –ø—Ä–æ–¥–æ–≤–∂–∏–º–æ.'
        keyboard = None

    return subtotal_message, keyboard


def cart_changed(obj, bot):
    user_id = obj.from_user.id

    if has_user_empty_products(user_id):
        bot.send_message(obj.from_user.id, '‚õî –í–∏–±–∞—á—Ç–µ, –º–∏ –Ω–µ –∑–º–æ–∂–µ–º–æ –æ—Ñ–æ—Ä–º–∏—Ç–∏ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è. '
                                           '–í–∏ –º–∞—î—Ç–µ —Ç–æ–≤–∞—Ä–∏ –≤ –∫–æ—Ä–∑–∏–Ω—ñ —è–∫–∏—Ö –Ω–µ–º–∞—î –≤ –Ω–∞—è–≤–Ω–æ—Å—Ç—ñ')
        show_cart(obj, bot)
        return True

    if cart_total_changed(user_id):
        bot.send_message(obj.from_user.id, '‚õî –°—Ö–æ–∂–µ —Ü—ñ–Ω–∏ –Ω–∞ —Ç–æ–≤–∞—Ä –∑–º—ñ–Ω–∏–ª–∏—Å—è, –ø–µ—Ä–µ–≤—ñ—Ä—Ç–µ –±—É–¥—å-–ª–∞—Å–∫–∞ –∫–æ—Ä–∑–∏–Ω—É.')
        show_cart(obj, bot)
        return True

    if cart_quantity_changed(user_id):
        bot.send_message(obj.from_user.id, '‚õî –°—Ö–æ–∂–µ –∫—ñ–ª—å–∫—ñ—Å—Ç—å –Ω–∞—è–≤–Ω–∏—Ö —Ç–æ–≤–∞—Ä—ñ–≤ –∑–º—ñ–Ω–∏–ª–∞—Å—å, –ø–µ—Ä–µ–≤—ñ—Ä—Ç–µ –±—É–¥—å-–ª–∞—Å–∫–∞ –∫–æ—Ä–∑–∏–Ω—É.')
        show_cart(obj, bot)
        return True

    return False


def get_phone_number(obj, bot):
    customer_phone = None
    if obj.content_type == 'contact':
        customer_phone = obj.contact.phone_number
    else:
        if not validate_phone_number(obj.text):
            bot.send_message(obj.from_user.id, '–í–≤–µ–¥—ñ—Ç—å –∫–æ—Ä–µ–∫—Ç–Ω–∏–π –Ω–æ–º–µ—Ä.')
        else:
            customer_phone = obj.text

    return customer_phone
